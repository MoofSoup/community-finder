###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################


class Company(BaseModel):
    name: Optional[str] = None

class CytoscapeEdge(BaseModel):
    data: Optional["CytoscapeEdgeData"] = None

class CytoscapeEdgeData(BaseModel):
    id: Optional[str] = None
    source: Optional[str] = None
    target: Optional[str] = None
    label: Optional[str] = None

class CytoscapeJSON(BaseModel):
    elements: Optional["Elements"] = None

class CytoscapeNode(BaseModel):
    data: Dict[str, Optional[str]]

class DynamicOutput(BaseModel):
    model_config = ConfigDict(extra='allow')

class Elements(BaseModel):
    nodes: List["CytoscapeNode"]
    edges: List["CytoscapeEdge"]

class Event(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    link: Optional[str] = None
    speaker: Optional["Speaker"] = None
    datetime: Optional[str] = None

class Speaker(BaseModel):
    name: Optional[str] = None
    title: Optional[str] = None
    company: Optional["Company"] = None
