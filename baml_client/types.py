###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union, TypeAlias


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Company(BaseModel):
    name: str

class CytoscapeEdge(BaseModel):
    data: "CytoscapeEdgeData"

class CytoscapeEdgeData(BaseModel):
    id: str
    source: str
    target: str
    label: str

class CytoscapeJSON(BaseModel):
    elements: "Elements"

class CytoscapeNode(BaseModel):
    data: Dict[str, str]

class DynamicOutput(BaseModel):
    model_config = ConfigDict(extra='allow')

class Elements(BaseModel):
    nodes: List["CytoscapeNode"]
    edges: List["CytoscapeEdge"]

class Event(BaseModel):
    name: str
    description: str
    link: str
    speaker: "Speaker"
    datetime: str

class Speaker(BaseModel):
    name: str
    title: str
    company: Optional["Company"] = None
